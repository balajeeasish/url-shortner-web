{"ast":null,"code":"var _jsxFileName = \"/Users/balajeeasishbrahmandam/Downloads/URL Shortner/url-shortener-web-master/src/pages/ShortIdRedirect/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport AppConstants from \"../../App.constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ShortIdRedirect = () => {\n  _s();\n\n  const {\n    shortId\n  } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  useEffect(() => {\n    setIsLoading(true);\n    setErrorMessage(\"\");\n    fetch(`${AppConstants.API_URL}/urls/${shortId}`).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        response.json().then(data => {\n          setIsLoading(false);\n          setErrorMessage(data.errorMessage);\n        });\n      }\n    }).then(data => {\n      setIsLoading(false);\n\n      if (data === null || data === void 0 ? void 0 : data.longURL) {\n        window.location.href = data.longURL;\n      }\n    });\n  }, [shortId]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Redirecting to long URL...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 21\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"span\", {\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ShortIdRedirect, \"QCGx2feTyA9UqeGRF6vRPqrRDZA=\", false, function () {\n  return [useParams];\n});\n\n_c = ShortIdRedirect;\nexport default ShortIdRedirect;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShortIdRedirect\");","map":{"version":3,"sources":["/Users/balajeeasishbrahmandam/Downloads/URL Shortner/url-shortener-web-master/src/pages/ShortIdRedirect/index.js"],"names":["React","useEffect","useState","useParams","AppConstants","ShortIdRedirect","shortId","isLoading","setIsLoading","errorMessage","setErrorMessage","fetch","API_URL","then","response","ok","json","data","longURL","window","location","href"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,OAAOC,YAAP,MAAyB,qBAAzB;;;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAC5B,QAAM;AAAEC,IAAAA;AAAF,MAAcH,SAAS,EAA7B;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,EAAD,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAC,IAAAA,KAAK,CAAE,GAAEP,YAAY,CAACQ,OAAQ,SAAQN,OAAQ,EAAzC,CAAL,CACGO,IADH,CACSC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,OAFD,MAEO;AACLF,QAAAA,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAsBI,IAAD,IAAU;AAC7BT,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,UAAAA,eAAe,CAACO,IAAI,CAACR,YAAN,CAAf;AACD,SAHD;AAID;AACF,KAVH,EAWGI,IAXH,CAWSI,IAAD,IAAU;AACdT,MAAAA,YAAY,CAAC,KAAD,CAAZ;;AACA,UAAIS,IAAJ,aAAIA,IAAJ,uBAAIA,IAAI,CAAEC,OAAV,EAAmB;AACjBC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuBJ,IAAI,CAACC,OAA5B;AACD;AACF,KAhBH;AAiBD,GApBQ,EAoBN,CAACZ,OAAD,CApBM,CAAT;AAsBA,sBACE;AAAA,eACGC,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADhB,EAEGE,YAAY,iBAAI;AAAA,gBAAOA;AAAP;AAAA;AAAA;AAAA;AAAA,YAFnB;AAAA,kBADF;AAMD,CAjCD;;GAAMJ,e;UACgBF,S;;;KADhBE,e;AAmCN,eAAeA,eAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport AppConstants from \"../../App.constants\";\n\nconst ShortIdRedirect = () => {\n  const { shortId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  useEffect(() => {\n    setIsLoading(true);\n    setErrorMessage(\"\");\n    fetch(`${AppConstants.API_URL}/urls/${shortId}`)\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          response.json().then((data) => {\n            setIsLoading(false);\n            setErrorMessage(data.errorMessage);\n          });\n        }\n      })\n      .then((data) => {\n        setIsLoading(false);\n        if (data?.longURL) {\n          window.location.href = data.longURL;\n        }\n      });\n  }, [shortId]);\n\n  return (\n    <>\n      {isLoading && <span>Redirecting to long URL...</span>}\n      {errorMessage && <span>{errorMessage}</span>}\n    </>\n  );\n};\n\nexport default ShortIdRedirect;\n"]},"metadata":{},"sourceType":"module"}